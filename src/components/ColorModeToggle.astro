---
import { COLOR_MODES } from '../utils/colorModes';
---

<div class="relative group" id="color-mode-container">
  <button
    id="color-mode-trigger"
    class="p-2 rounded-lg hover:bg-surface/80 transition-all duration-300 flex items-center gap-2"
    aria-label="Toggle color mode"
  >
    <span class="text-lg">ðŸŽ¨</span>
    <span class="text-sm text-text-secondary">Theme</span>
  </button>

  <div
    id="color-mode-dropdown"
    class="absolute right-0 top-full mt-2 z-50 bg-surface rounded-lg shadow-lg border border-accent-primary/20 backdrop-blur-sm hidden"
  >
    <div class="p-2">
      <div class="flex flex-col gap-1 min-w-[10rem]">
        {Object.entries(COLOR_MODES).map(([mode, theme]) => (
          <button
            class="w-full px-3 py-2 text-sm flex items-center gap-2 rounded-md hover:bg-accent-primary/10 transition-colors"
            data-mode={mode}
          >
            <span class="text-base">{theme.icon}</span>
            <span class="text-text-secondary">{theme.name}</span>
          </button>
        ))}
      </div>
    </div>
  </div>
</div>

<script>
  async function initColorModeToggle() {
    const container = document.getElementById('color-mode-container');
    const trigger = document.getElementById('color-mode-trigger');
    const dropdown = document.getElementById('color-mode-dropdown');
    
    if (trigger && dropdown) {
      // Show/hide dropdown
      trigger.addEventListener('click', (e) => {
        e.stopPropagation();
        dropdown.classList.toggle('hidden');
      });

      // Close dropdown when clicking outside
      document.addEventListener('click', (e) => {
        if (!container?.contains(e.target as Node)) {
          dropdown.classList.add('hidden');
        }
      });

      // Handle theme selection
      dropdown.addEventListener('click', async (e) => {
        const button = (e.target as HTMLElement).closest('button');
        if (!button) return;
        
        const mode = button.dataset.mode;
        if (mode) {
          const { setColorMode } = await import('../utils/colorModes');
          setColorMode(mode);
          dropdown.classList.add('hidden');
        }
      });
    }
  }

  // Initialize when the DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      initColorModeToggle().catch(console.error);
    });
  } else {
    initColorModeToggle().catch(console.error);
  }
</script>